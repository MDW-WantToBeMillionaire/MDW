//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MDWquizz.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Question", Namespace="http://schemas.datacontract.org/2004/07/GameContract")]
    [System.SerializableAttribute()]
    public partial class Question : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AnswerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DetailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWquizz.ServiceReference1.Answer[] OptionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int QuestionIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Answer {
            get {
                return this.AnswerField;
            }
            set {
                if ((object.ReferenceEquals(this.AnswerField, value) != true)) {
                    this.AnswerField = value;
                    this.RaisePropertyChanged("Answer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Details {
            get {
                return this.DetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.DetailsField, value) != true)) {
                    this.DetailsField = value;
                    this.RaisePropertyChanged("Details");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWquizz.ServiceReference1.Answer[] Options {
            get {
                return this.OptionsField;
            }
            set {
                if ((object.ReferenceEquals(this.OptionsField, value) != true)) {
                    this.OptionsField = value;
                    this.RaisePropertyChanged("Options");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int QuestionID {
            get {
                return this.QuestionIDField;
            }
            set {
                if ((this.QuestionIDField.Equals(value) != true)) {
                    this.QuestionIDField = value;
                    this.RaisePropertyChanged("QuestionID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Answer", Namespace="http://schemas.datacontract.org/2004/07/GameContract")]
    [System.SerializableAttribute()]
    public partial class Answer : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AnswerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DetailsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AnswerID {
            get {
                return this.AnswerIDField;
            }
            set {
                if ((this.AnswerIDField.Equals(value) != true)) {
                    this.AnswerIDField = value;
                    this.RaisePropertyChanged("AnswerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Details {
            get {
                return this.DetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.DetailsField, value) != true)) {
                    this.DetailsField = value;
                    this.RaisePropertyChanged("Details");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Player", Namespace="http://schemas.datacontract.org/2004/07/GameContract")]
    [System.SerializableAttribute()]
    public partial class Player : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CreditField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PlayerIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Credit {
            get {
                return this.CreditField;
            }
            set {
                if ((this.CreditField.Equals(value) != true)) {
                    this.CreditField = value;
                    this.RaisePropertyChanged("Credit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PlayerID {
            get {
                return this.PlayerIDField;
            }
            set {
                if ((this.PlayerIDField.Equals(value) != true)) {
                    this.PlayerIDField = value;
                    this.RaisePropertyChanged("PlayerID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="GameContract", ConfigurationName="ServiceReference1.IGameplay", CallbackContract=typeof(MDWquizz.ServiceReference1.IGameplayCallback))]
    public interface IGameplay {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameContract/IGameplay/AnswerQuestion")]
        void AnswerQuestion(int qid);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameContract/IGameplay/AnswerQuestion")]
        System.Threading.Tasks.Task AnswerQuestionAsync(int qid);
        
        [System.ServiceModel.OperationContractAttribute(Action="GameContract/IGameplay/CorrectAnswer", ReplyAction="GameContract/IGameplay/CorrectAnswerResponse")]
        void CorrectAnswer(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="GameContract/IGameplay/CorrectAnswer", ReplyAction="GameContract/IGameplay/CorrectAnswerResponse")]
        System.Threading.Tasks.Task CorrectAnswerAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="GameContract/IGameplay/CheckAnswer", ReplyAction="GameContract/IGameplay/CheckAnswerResponse")]
        bool CheckAnswer(MDWquizz.ServiceReference1.Question q, string a);
        
        [System.ServiceModel.OperationContractAttribute(Action="GameContract/IGameplay/CheckAnswer", ReplyAction="GameContract/IGameplay/CheckAnswerResponse")]
        System.Threading.Tasks.Task<bool> CheckAnswerAsync(MDWquizz.ServiceReference1.Question q, string a);
        
        [System.ServiceModel.OperationContractAttribute(Action="GameContract/IGameplay/GetQuestionList", ReplyAction="GameContract/IGameplay/GetQuestionListResponse")]
        MDWquizz.ServiceReference1.Question[] GetQuestionList();
        
        [System.ServiceModel.OperationContractAttribute(Action="GameContract/IGameplay/GetQuestionList", ReplyAction="GameContract/IGameplay/GetQuestionListResponse")]
        System.Threading.Tasks.Task<MDWquizz.ServiceReference1.Question[]> GetQuestionListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="GameContract/IGameplay/GetPlayerList", ReplyAction="GameContract/IGameplay/GetPlayerListResponse")]
        MDWquizz.ServiceReference1.Player[] GetPlayerList();
        
        [System.ServiceModel.OperationContractAttribute(Action="GameContract/IGameplay/GetPlayerList", ReplyAction="GameContract/IGameplay/GetPlayerListResponse")]
        System.Threading.Tasks.Task<MDWquizz.ServiceReference1.Player[]> GetPlayerListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="GameContract/IGameplay/CreateAPlayer", ReplyAction="GameContract/IGameplay/CreateAPlayerResponse")]
        void CreateAPlayer(int id, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="GameContract/IGameplay/CreateAPlayer", ReplyAction="GameContract/IGameplay/CreateAPlayerResponse")]
        System.Threading.Tasks.Task CreateAPlayerAsync(int id, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="GameContract/IGameplay/GetCredit", ReplyAction="GameContract/IGameplay/GetCreditResponse")]
        int GetCredit(MDWquizz.ServiceReference1.Player p);
        
        [System.ServiceModel.OperationContractAttribute(Action="GameContract/IGameplay/GetCredit", ReplyAction="GameContract/IGameplay/GetCreditResponse")]
        System.Threading.Tasks.Task<int> GetCreditAsync(MDWquizz.ServiceReference1.Player p);
        
        [System.ServiceModel.OperationContractAttribute(Action="GameContract/IGameplay/Finish", ReplyAction="GameContract/IGameplay/FinishResponse")]
        void Finish(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="GameContract/IGameplay/Finish", ReplyAction="GameContract/IGameplay/FinishResponse")]
        System.Threading.Tasks.Task FinishAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="GameContract/IGameplay/SubscribeEvent", ReplyAction="GameContract/IGameplay/SubscribeEventResponse")]
        void SubscribeEvent();
        
        [System.ServiceModel.OperationContractAttribute(Action="GameContract/IGameplay/SubscribeEvent", ReplyAction="GameContract/IGameplay/SubscribeEventResponse")]
        System.Threading.Tasks.Task SubscribeEventAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="GameContract/IGameplay/UnsubscribeEvent", ReplyAction="GameContract/IGameplay/UnsubscribeEventResponse")]
        void UnsubscribeEvent();
        
        [System.ServiceModel.OperationContractAttribute(Action="GameContract/IGameplay/UnsubscribeEvent", ReplyAction="GameContract/IGameplay/UnsubscribeEventResponse")]
        System.Threading.Tasks.Task UnsubscribeEventAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameplayCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="GameContract/IGameplay/ShowNextQuestion")]
        void ShowNextQuestion();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameplayChannel : MDWquizz.ServiceReference1.IGameplay, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GameplayClient : System.ServiceModel.DuplexClientBase<MDWquizz.ServiceReference1.IGameplay>, MDWquizz.ServiceReference1.IGameplay {
        
        public GameplayClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public GameplayClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public GameplayClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameplayClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameplayClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void AnswerQuestion(int qid) {
            base.Channel.AnswerQuestion(qid);
        }
        
        public System.Threading.Tasks.Task AnswerQuestionAsync(int qid) {
            return base.Channel.AnswerQuestionAsync(qid);
        }
        
        public void CorrectAnswer(string name) {
            base.Channel.CorrectAnswer(name);
        }
        
        public System.Threading.Tasks.Task CorrectAnswerAsync(string name) {
            return base.Channel.CorrectAnswerAsync(name);
        }
        
        public bool CheckAnswer(MDWquizz.ServiceReference1.Question q, string a) {
            return base.Channel.CheckAnswer(q, a);
        }
        
        public System.Threading.Tasks.Task<bool> CheckAnswerAsync(MDWquizz.ServiceReference1.Question q, string a) {
            return base.Channel.CheckAnswerAsync(q, a);
        }
        
        public MDWquizz.ServiceReference1.Question[] GetQuestionList() {
            return base.Channel.GetQuestionList();
        }
        
        public System.Threading.Tasks.Task<MDWquizz.ServiceReference1.Question[]> GetQuestionListAsync() {
            return base.Channel.GetQuestionListAsync();
        }
        
        public MDWquizz.ServiceReference1.Player[] GetPlayerList() {
            return base.Channel.GetPlayerList();
        }
        
        public System.Threading.Tasks.Task<MDWquizz.ServiceReference1.Player[]> GetPlayerListAsync() {
            return base.Channel.GetPlayerListAsync();
        }
        
        public void CreateAPlayer(int id, string name) {
            base.Channel.CreateAPlayer(id, name);
        }
        
        public System.Threading.Tasks.Task CreateAPlayerAsync(int id, string name) {
            return base.Channel.CreateAPlayerAsync(id, name);
        }
        
        public int GetCredit(MDWquizz.ServiceReference1.Player p) {
            return base.Channel.GetCredit(p);
        }
        
        public System.Threading.Tasks.Task<int> GetCreditAsync(MDWquizz.ServiceReference1.Player p) {
            return base.Channel.GetCreditAsync(p);
        }
        
        public void Finish(int id) {
            base.Channel.Finish(id);
        }
        
        public System.Threading.Tasks.Task FinishAsync(int id) {
            return base.Channel.FinishAsync(id);
        }
        
        public void SubscribeEvent() {
            base.Channel.SubscribeEvent();
        }
        
        public System.Threading.Tasks.Task SubscribeEventAsync() {
            return base.Channel.SubscribeEventAsync();
        }
        
        public void UnsubscribeEvent() {
            base.Channel.UnsubscribeEvent();
        }
        
        public System.Threading.Tasks.Task UnsubscribeEventAsync() {
            return base.Channel.UnsubscribeEventAsync();
        }
    }
}
